//	Controller (of MVC)
//	Running on http://localhost:3001 and proxied by Apache to /api

//	Dependencies (if any)
import Model from "../models/model.js";
import express from 'express';

// const express = require('express');
const app = express();

//	For parsing application/json
app.use(express.json());
//	For parsing application/x-www-form-urlencoded
app.use(express.urlencoded({ extended: true}));

const port = 3001;

/*	Constants	*/

/**
 * Length of user and session IDs, in characters (as generated by generateID();
 * this will be replaced with server cookies in Checkpoint 2 onwards)
 */
const ID_LENGTH = 20;

/**
 * Number of letters in the English alphabet.
 */
const NUM_LETTERS = 26;

/**
 * Number of digits (in base 10).
 */
const NUM_DIGITS = 10;

/**
 * Number of possible characters in an ID generated by generateID().
 */
const ID_ALPHABET_SIZE = NUM_LETTERS * 2 + NUM_DIGITS;

//	Cookie names
const SESSION_ID = "session_id";
const USER_ID = "user_id";

/*	Global Variables	*/
let model;

/**
 * Generate a random user or session ID string of the given length.
 * @param {Number} id_length 
 */
function generateID(id_length = ID_LENGTH) {
    let id = "";
    for (let i = 0; i < id_length; i++) {
        let rIndex = Math.floor(Math.random() * ID_ALPHABET_SIZE);

        if (rIndex < NUM_LETTERS) {
            //  Append lower-case letter
            id += String.fromCharCode("a".charCodeAt(0) + rIndex);
        }
        else if (rIndex < NUM_LETTERS * 2) {
            //  Append upper-case letter
            id += String.fromCharCode("A".charCodeAt(0) + rIndex - NUM_LETTERS);
        }
        else {
            //  Append digit
            id += String.fromCharCode("0".charCodeAt(0) 
                + rIndex - (2 * NUM_LETTERS));
        }
    }

    return id;
}

//	https://stackoverflow.com/questions/44816519/how-to-get-cookie-value-in-expressjs
function getRequestCookies(req) {
	if (!req.headers.cookie)	return {};

	let cookieArray = req.headers.cookie.split("; ");
	let cookies = {};
	for (let cookieString of cookieArray) {
		let cookieKeyValue = cookieString.split('=');
		cookies[cookieKeyValue[0]] = cookieKeyValue[1];
	}

	return cookies;
}

function setupSession(req, res) {
	let session = {};

	let cookies = getRequestCookies(req);

	if (!(USER_ID in cookies)) {
		//	Unknown user - create new user ID and session ID.
		session.user_id = generateID();
		session.session_id = generateID();

		res.cookie(USER_ID, session.user_id, {
			//	Set user_id cookie to expire in one year (in milliseconds)
			maxAge: 1000 * 60 * 60 * 24 * 365
		});

		res.cookie(SESSION_ID, session.session_id, {});
	}
	else {
		//	User is known
		session.user_id = cookies[USER_ID];

		if (SESSION_ID in cookies) {
			//	User has a session cookie
			session.session_id = cookies[SESSION_ID];
		}
		else {
			//	User doesn't have a session cookie - create a new one
			session.session_id = generateID();

			res.cookie(SESSION_ID, session.session_id, {});
		}
	}

	return session;
}

app.get('/', (req, res) => {
	console.log("GET /");
	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Send response
	res.status(200);
	res.set('Content-Type', 'text/html');
	res.send(`
		<h1>Node REST API Endpoint</h1>
		<p>Served proudly at <code>/api</code>!</p>
		<p>Hello, user ${session.user_id}! Your session id is ${session.session_id}.</p>
		<p>(Not very user-friendly, but this is just for database use).</p>
		<p>You can track your data 
		<a href="/api/user-sessions/${session.session_id}">here</a>.</p>
	`);
});

//	user-sessions collection routes

app.get('/user-sessions', async (req, res) => {
	console.log("GET /user-sessions");
	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Set headers
	res.status(200);
	res.set('Content-Type', 'application/json');
	res.set('Access-Control-Allow-Origin', "https://reporting.gilkeidar.com");

	//	3.	Get entire user-sessions table from database
	let user_sessions = await model.getAll("user-sessions");

	res.send(user_sessions);
});

app.get('/user-sessions/:id', async (req, res) => {
	console.log(`GET /user-sessions/${req.params.id}`);
	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Attempt to get user session data for the particular session id.
	let userSessionData = 
		await model.getOne("user-sessions", {_id: req.params.id});

	console.log(`Queried user-sessions object with id ${req.params.id}:`);
	console.log(userSessionData);

	res.set('Access-Control-Allow-Origin', "https://reporting.gilkeidar.com");

	if (!userSessionData) {
		//	No documents (UserSessions) matched - send empty payload
		res.status(404).send();
	}
	else {
		//	Matched a document - send it back to client
		res.status(200);
		res.set('Content-Type', 'application/json');
		res.send(userSessionData);
	}
});

app.post('/user-sessions/', async (req, res) => {
	console.log("POST /user-sessions/");
	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Get user session data from post request
	let newUserSession = req.body;

	//	3.	Stamp session data with user_id (user_id) and session_id (_id)
	newUserSession._id = session.session_id;
	newUserSession.user_id = session.user_id;

	console.log("POSTED payload with stamped fields:");
	console.log(newUserSession);

	//	4.	Push user session object to user-sessions table
	const result = await model.createOne("user-sessions", newUserSession);

	console.log("Result of attempting to create new document:");
	console.log(result);

	if (result.acknowledged) {
		res.status(201);
	}
	else {
		res.status(400);
	}

	//	5.	Send response (send back modified request payload)
	res.set('Content-Type', 'application/json');
	res.send(newUserSession);
});

app.delete('/user-sessions/:id', async (req, res) => {
	console.log(`DELETE /user-sessions/${req.params.id}`);
	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Attempt to delete session data with the given id
	const result = await model.deleteOne("user-sessions", req.params.id);

	console.log(
		`Result of attempting to delete document with id ${req.params.id}:`);
	console.log(result);

	//	Send empty response
	if (result.acknowledged) {
		res.status(200).send();
	} else {
		res.status(400).send();
	}

	//	3.	Send response
	// res.set('Content-Type', 'application/json');
	// res.send({});

});

app.put('/user-sessions/:id', async (req, res) => {
	console.log(`PUT /user-sessions/${req.params.id}`);
	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Get request payload from request
	let newUserSession = req.body;

	//	3.	Stamp session data with user_id (user_id) and session_id (_id)
	newUserSession._id = session.session_id;
	newUserSession.user_id = session.user_id;

	//	4.	Put user session object in user-sessions table
	const result = await model.replaceOne("user-sessions", 
		newUserSession._id, newUserSession);
	
	console.log(
		`Result of attempting to replace document with id ${req.params.id}:`);
	console.log(result);

	if (result.acknowledged) {
		res.status(200);
	} else {
		res.status(400);
	}

	//	5.	Send response
	res.set('Content-Type', 'application/json');
	res.send(newUserSession);
});

//	activity-bursts collection routes

app.get('/activity-bursts', async (req, res) => {
	console.log("GET /activity-bursts");
	//	1.	Setup session.
	let session = setupSession(req, res);

	//	2.	Return the entire activity-bursts collection from the user-data
	//		database.
	let activity_bursts = await model.getAll("activity-bursts");

	res.set('Access-Control-Allow-Origin', "https://reporting.gilkeidar.com");

	res.status(200).set("Content-Type", "application/json")
		.send(activity_bursts);
});

app.get('/activity-bursts/:id', async (req, res) => {
	console.log(`GET /activity-bursts/${req.params.id}`);
	//	1.	Setup session.
	let session = setupSession(req, res);

	//	2.	Query the activity-bursts collection for a single document with
	//		_id = :id.
	//	NOTE: Since activity-burst document's _id is set using ObjectIDs, we
	//	must convert the ID from the request (a string) to an ObjectID.
	let activityBurst = 
		await model.getOne('activity-bursts', {
			_id: model.convertStringToObjectID(req.params.id)
		});

	console.log(`Queried activity-bursts object with id ${req.params.id}:`);
	console.log(activityBurst);

	res.set('Access-Control-Allow-Origin', "https://reporting.gilkeidar.com");

	if (!activityBurst) {
		//	No documents (ActivityBursts) matched - send empty payload
		res.status(404).send();
	}
	else {
		//	Matched a document - send it back to the client
		res.status(200).set('Content-Type', 'application/json')
			.send(activityBurst);
	}
});

app.post('/activity-bursts', async (req, res) => {
	console.log("POST /activity-bursts");
	//	1.	Setup session.
	let session = setupSession(req, res);

	//	2.	Get ActivityBurst from POST request.
	let newActivityBurst = req.body;

	//	3.	Stamp ActivityBurst with session_id (session_id)
	newActivityBurst.session_id = session.session_id;

	console.log("POSTED payload with stamped fields:");
	console.log(newActivityBurst);

	//	4.	Attempt to create a document with contents newActivityBirst in the
	//		"activity-bursts" collection.
	const result = await model.createOne("activity-bursts", newActivityBurst);

	console.log("Result of attempting to create new document:");
	console.log(result);

	if (result.acknowledged) {
		res.status(201);
	}
	else {
		res.status(400);
	}

	//	5.	Send response (send back modified request payload)
	res.set('Content-Type', 'application/json').send(newActivityBurst);
});

app.delete('/activity-bursts/:id', async (req, res) => {
	console.log(`DELETE /activity-bursts/${req.params.id}`);

	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Attempt to delete session data with the given id
	const result = await model.deleteOne("activity-bursts", 
		model.convertStringToObjectID(req.params.id)
	);

	console.log(
		`Result of attempting to delete document with id ${req.params.id}:`
	);
	console.log(result);

	//	Send empty response
	if (result.acknowledged) {
		res.status(200).send();
	} else {
		res.status(400).send();
	}
});

app.put('/activity-bursts/:id', async (req, res) => {
	console.log(`PUT /activity-bursts/${req.params.id}`);

	//	1.	Setup session
	let session = setupSession(req, res);

	//	2.	Get request payload from request
	let newActivityBurst = req.body;

	//	3.	Stamp ActivityBurst with session_id (session_id)
	newActivityBurst.session_id = session.session_id;

	//	4.	Put user session object in activity-burst collection
	const result = await model.replaceOne("activity-bursts",
		model.convertStringToObjectID(req.params.id), newActivityBurst
	);

	console.log(
		`Result of attempting to replace document with id ${req.params.id}:`);
	console.log(result);

	if (result.acknowledged && result.modifiedCount == 1) {
		res.status(200);
	}
	else {
		res.status(400);
	}

	//	5.	Send response
	res.set('Content-Type', 'application/json').send(newActivityBurst);
});

//	/no-script routing
app.get('/no-script', async (req, res) => {
	console.log("GET /no-script");

	//	1.	Setup session.
	let session = setupSession(req, res);

	//	2.	Query the user-sessions collection to find that document with
	//		_id = session.session_id.
	let userSession = await model.getOne('user-sessions', 
		{_id: session.session_id});

	if (!userSession) {
		//	No user session matched - create a new one.
		userSession = {
			_id: session.session_id,
			user_id: session.user_id,
			static_data: {
				"user-allows-javascript": false
			},
			performance_data: {}
		};

		const result = await model.createOne("user-sessions", userSession);

		if (result.acknowledged) {
			res.status(201).send();
		}
		else {
			res.status(500).send();
		}
	}
	else {
		//	UserSession found!
		//	1.	Set the UserSession's static_data["user-allows-javascript"]
		//		property to false.
		const result = await model.updateOne("user-sessions", 
			session.session_id, {
				"static_data.user-allows-javascript": false
			});
		
		if (result.acknowledged) {
			res.status(200).send();
		}
		else {
			res.status(400).send();
		}
	}
});

//	Analytics routing (for faster queries)
app.get('/errors', async (req, res) => {
	console.log("GET /errors");

	//	1.	Return activity-bursts that contain errors.
	let activity_bursts = await model.getMany("activity-bursts", {
		activity: {
			event_name: "console-error"
		}
	});

	res.set('Access-Control-Allow-Origin', "https://reporting.gilkeidar.com");

	res.status(200).set("Content-Type", "application/json")
		.send(activity_bursts);

});


app.listen(port, () => {
	//	Initialize model
	model = new Model();
	console.log(`REST API listening on port ${port}.`)
});